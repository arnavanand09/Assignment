//ADO.Net Assignment

//In company ABC. Pvt. Ltd. , there are 2 type of Employees 
//On Contract Basis and On Payroll

//We have to create an application to store all the employee records in database and also need to store their salary in database.  

//Every employee should have a unique ID, should be autogenerated
//name, reporting manager

//Contract basis employees will have contract date, duration and charges

//Payroll employees will have Joining date, exp, basic salary , da, hra, etc. 

//Depending upon Exp, calculate Net Salary
//if exp > 10 years , DA = 10 % of basic, HRA = 8.5 % of basic , PF = 6200
//if exp > 7 years and less than 10 years , DA = 7 % of basic, HRA = 6.5 % of basic , PF = 4100
//if exp > 5 years and less than 7 years, DA = 4.1 % of basic, HRA = 3.8 % of basic , PF = 1800
//if exp < 10 years , DA = 1.9 % of basic, HRA = 2.0 % of basic , PF = 1200

//Display the details in proper way

//You are supposed to do it for some Employees, count is not known. Which loop you will use?

//  1. Understand how you will make this class and add data members
//  2. Create Methods accordingly:
//       We know all details about Employee
//  3. Print total number of Employees

using Microsoft.Data.SqlClient;
using System;

namespace Assignment19
{
    internal class Program
    {
        static string cs = "server=LAPTOP-HLBR261P;database=EmployeeDB;integrated security=true;Encrypt=True;TrustServerCertificate=True";

        static void Main(string[] args)
        {
            int count = 0;

            while (true)
            {
                Console.WriteLine("1. Add Contract Employee");
                Console.WriteLine("2. Add Payroll Employee");
                Console.WriteLine("3. Exit");
                Console.Write("Enter choice: ");
                int ch = int.Parse(Console.ReadLine());

                switch (ch)
                {
                    case 1:
                        AddContractEmployee();
                        count++;
                        break;
                    case 2:
                        AddPayrollEmployee();
                        count++;
                        break;
                    case 3:
                        Console.WriteLine("Total Employees Added: " + count);
                        return;
                    default:
                        Console.WriteLine("Invalid choice.");
                        break;
                }
            }
        }

        static void AddContractEmployee()
        {
            Console.Write("Name: ");
            string name = Console.ReadLine();

            Console.Write("Manager: ");
            string manager = Console.ReadLine();

            Console.Write("Contract Date (yyyy-mm-dd): ");
            string contractDate = Console.ReadLine();

            Console.Write("Duration (months): ");
            int duration = int.Parse(Console.ReadLine());

            Console.Write("Charges: ");
            decimal charges = decimal.Parse(Console.ReadLine());

            using (SqlConnection con = new SqlConnection(cs))
            {
                string q = "INSERT INTO Employee (name, manager, employeeType, contractDate, duration, charges) VALUES (@n, @m, @et, @cd, @dur, @ch)";

                SqlCommand cmd = new SqlCommand(q, con);
                cmd.Parameters.AddWithValue("@n", name);
                cmd.Parameters.AddWithValue("@m", manager);
                cmd.Parameters.AddWithValue("@et", "Contract");
                cmd.Parameters.AddWithValue("@cd", contractDate);
                cmd.Parameters.AddWithValue("@dur", duration);
                cmd.Parameters.AddWithValue("@ch", charges);

                con.Open();
                cmd.ExecuteNonQuery();
                Console.WriteLine("Contract employee added successfully.\n");
            }
        }

        static void AddPayrollEmployee()
        {
            Console.Write("Name: ");
            string name = Console.ReadLine();

            Console.Write("Manager: ");
            string manager = Console.ReadLine();

            Console.Write("Joining Date (yyyy-mm-dd): ");
            string joiningDate = Console.ReadLine();

            Console.Write("Experience (years): ");
            int exp = int.Parse(Console.ReadLine());

            Console.Write("Basic Salary: ");
            decimal basic = decimal.Parse(Console.ReadLine());

            decimal da = 0, hra = 0, pf = 0;

            if (exp > 10)
            {
                da = basic * 0.10m;
                hra = basic * 0.085m;
                pf = 6200;
            }
            else if (exp > 7)
            {
                da = basic * 0.07m;
                hra = basic * 0.065m;
                pf = 4100;
            }
            else if (exp > 5)
            {
                da = basic * 0.041m;
                hra = basic * 0.038m;
                pf = 1800;
            }
            else
            {
                da = basic * 0.019m;
                hra = basic * 0.02m;
                pf = 1200;
            }

            decimal netSalary = basic + da + hra - pf;

            using (SqlConnection con = new SqlConnection(cs))
            {
                string q = "INSERT INTO Employee (name, manager, employeeType, joiningDate, exp, basic, da, hra, pf, netSalary) VALUES (@n, @m, @et, @jd, @e, @b, @d, @h, @p, @ns)";
                SqlCommand cmd = new SqlCommand(q, con);
                cmd.Parameters.AddWithValue("@n", name);
                cmd.Parameters.AddWithValue("@m", manager);
                cmd.Parameters.AddWithValue("@et", "Payroll");
                cmd.Parameters.AddWithValue("@jd", joiningDate);
                cmd.Parameters.AddWithValue("@e", exp);
                cmd.Parameters.AddWithValue("@b", basic);
                cmd.Parameters.AddWithValue("@d", da);
                cmd.Parameters.AddWithValue("@h", hra);
                cmd.Parameters.AddWithValue("@p", pf);
                cmd.Parameters.AddWithValue("@ns", netSalary);

                con.Open();
                cmd.ExecuteNonQuery();
                Console.WriteLine("Payroll employee added successfully.\n");
            }
        }
    }
}